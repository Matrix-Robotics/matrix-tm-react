{"version":3,"sources":["draw/Draw.js","Capture.js","Interface.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","buttons","display","justifyContent","width","Drawing","props","classes","canvasGrid","React","useRef","canvasRef","Grid","item","xs","container","ref","direction","alignItems","hideGrid","brushColor","brushRadius","lazyRadius","canvasWidth","canvasHeight","node","useState","setWidth","useEffect","temp","getComputedStyle","current","updateSize","clientWidth","parseFloat","paddingLeft","paddingRight","window","addEventListener","removeEventListener","useParentWidthSize","style","border","aspectRatio","className","IconButton","onClick","clear","undo","color","onMouseDown","drawSrc","canvasContainer","children","toDataURL","onChange","root","imageList","maxHeight","overflowY","transform","image","height","maxWidth","videoConstraints","facingMode","WebcamCapture","webcamRef","mouseHandler","setMouseHandler","handleMouseUp","clearTimeout","capture","e","imageSrc","getScreenshot","imgSrc","handleCapture","audio","id","screenshotFormat","forceScreenshotSourceSize","Button","variant","size","handleMouseDown","setTimeout","onMouseUp","onMouseLeave","Capture","scrollRef","selectedFiles","setSelectedFiles","toggleWebcam","setToggleWebcam","toggleDraw","setToggleDraw","alertPerm","setAlertPerm","handleImageList","useCallback","closeCamera","captureEl","scrollTop","scrollHeight","Box","spacing","src","prevImages","concat","overflow","Typography","ImageList","rowHeight","cols","map","index","ImageListItem","alt","title","pt","p","prevState","checkIsApproved","a","navigator","mediaDevices","enumerateDevices","deviceInfo","some","info","label","onCameraOn","then","res","getUserMedia","video","stream","console","log","startIcon","cardId","accept","type","multiple","hidden","target","filesArray","Array","from","files","file","URL","createObjectURL","revokeObjectURL","htmlFor","component","Alert","onClose","severity","classifier","webcam","classGrid","minHeight","classTitle","fontSize","cardClass","flexDirection","marginBottom","cardButton","padding","cardAction","alignSelf","cardGrid","paddingTop","paddingBottom","cardCenter","position","top","cardMedia","cardContent","flexGrow","form","gap","footer","backgroundColor","palette","background","paper","grid","progressColorPrimary","progressBarActive","progressBarDisable","modelOptions","version","checkpointUrl","alpha","trainingLayer","metadata","tfjsVersion","tmVersion","packageVersion","packageName","modelName","timeStamp","labels","userMetadata","grayscale","imageSize","parameters","tmImage","denseUnits","epochs","learningRate","batchSize","cards","metrics","tab","name","styles","fitCallbacks","tfvis","setLabels","forEach","card","card_index","tempImageList","length","tempImageEl","Image","addExample","train","predict","canvas","prediction","Interface","webcamCanvas","captureElList","trainGrid","previewGrid","isTraining","setIsTraining","isTrained","setIsTrained","setCards","porps","parentNode","ClassColumn","handleCards","newCards","Fragment","ClassCard","Card","f","tempCards","newCardId","at","newCard","cardTitle","setCardTitle","isTitleFocused","setIsTitleFocused","cardTitleRef","anchorEl","setAnchorEl","open","Boolean","CardHeader","action","event","currentTarget","Menu","getContentAnchorEl","keepMounted","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","ITEM_HEIGHT","value","MenuItem","opt","indexOf","splice","handleOpe","TextField","autoFocus","inputProps","inputRef","onBlur","handleTitle","onKeyDown","key","blur","CardActions","TrainColumn","isUploadModel","setIsUploadModel","isUploadWeights","setIsUploadWeights","splitValue","setSplitValue","epochsValue","setEpochsValue","batchValue","setBatchValue","lRateValue","setLRateValue","handleTrain","Number","flat","prev","handleUploadModel","uploadModel","document","getElementById","uploadWeights","tf","browserFiles","model","catch","err","error","fullWidth","disableElevation","disabled","Accordion","AccordionSummary","expandIcon","AccordionDetails","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","newValue","InputProps","Select","displayEmpty","maxLength","toFixed","endIcon","PreviewClassConfidence","Object","entries","predictClasses","predictClass","minWidth","mr","LinearProgress","probability","Math","round","PreviewCam","timeoutHandler","setTimeoutHandler","inputSrc","state","setState","setup","play","previewLoop","update","preview","webcamLoaded","loadWebEl","appendChild","innerHTML","FormGroup","row","FormControlLabel","control","Switch","checked","bar","colorPrimary","PreviewColumn","exportConfig","save","CardContent","loadPretrained","fill","_","i","createRef","CssBaseline","Container","sm","md","alignContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ae8d5ddb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddToPhotosOutlinedIcon from '@material-ui/icons/AddToPhotosOutlined';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CanvasDraw from \"react-canvas-draw\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    width: '100%'\r\n  }\r\n}));\r\n\r\nexport default function Drawing(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const canvasGrid = React.useRef(null);\r\n  const canvasRef = React.useRef();\r\n\r\n  function useParentWidthSize(node) {\r\n    const [width, setWidth] = React.useState();\r\n    React.useEffect(() => {\r\n      let temp = getComputedStyle(node.current)\r\n      function updateSize() {\r\n        setWidth(node.current.clientWidth - parseFloat(temp.paddingLeft) - parseFloat(temp.paddingRight));\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    });\r\n    return width;\r\n  }\r\n\r\n  const handleDraw = (drawSrc) => {\r\n    props.onChange(drawSrc);\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={6}>\r\n      <Grid container ref={canvasGrid} direction=\"column\" justifyContent=\"space-between\" alignItems=\"stretch\" >\r\n        <CanvasDraw\r\n          ref={canvasRef}\r\n          hideGrid={true}\r\n          brushColor=\"#1F1F1F\"\r\n          brushRadius={5}\r\n          lazyRadius={0}\r\n          canvasWidth=\"100%\"\r\n          canvasHeight={useParentWidthSize(canvasGrid)}\r\n          style={{\r\n            border: \"1px solid black\",\r\n            aspectRatio: 1\r\n          }}\r\n        />\r\n        <div className={classes.buttons}>\r\n          <IconButton aria-label=\"delete\"\r\n            onClick={() => {\r\n              canvasRef.current.clear();\r\n            }}\r\n          >\r\n            <RefreshIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={() => {\r\n              canvasRef.current.undo();\r\n            }}\r\n          >\r\n            <UndoIcon />\r\n          </IconButton>\r\n          <IconButton color=\"primary\"\r\n            onMouseDown={() => {\r\n              handleDraw(canvasRef.current.canvasContainer.children[1].toDataURL())\r\n              canvasRef.current.clear();\r\n            }}\r\n          >\r\n            <AddToPhotosOutlinedIcon />\r\n          </IconButton>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport ImageList from '@material-ui/core/ImageList';\r\nimport ImageListItem from '@material-ui/core/ImageListItem';\r\nimport GestureIcon from '@material-ui/icons/Gesture';\r\nimport VideocamOutlinedIcon from '@material-ui/icons/VideocamOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Drawing from \"./draw/Draw\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%'\r\n  },\r\n  imageList: {\r\n    maxHeight: '300px',\r\n    overflowY: 'auto',\r\n    transform: 'translateZ(0)'\r\n  },\r\n  image: {\r\n    height: '100%',\r\n    maxWidth: '100%'\r\n  }\r\n}));\r\n\r\n// For more information on facingMode, \r\n// please see the MDN web docs https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode\r\nconst videoConstraints = {\r\n  width: 224,\r\n  height: 224,\r\n  facingMode: \"user\"\r\n};\r\n\r\nfunction WebcamCapture(props) {\r\n\r\n  const webcamRef = React.useRef(null);\r\n  const [mouseHandler, setMouseHandler] = React.useState(1);\r\n\r\n  const handleCapture = (e, imgSrc) => {\r\n    props.onChange(e, imgSrc);\r\n  }\r\n\r\n  const handleMouseDown = (e) => {\r\n    setMouseHandler(setTimeout(capture, 10, e));\r\n    if (mouseHandler) {\r\n      setMouseHandler(setTimeout(handleMouseDown, 50, e));\r\n    }\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    clearTimeout(mouseHandler);\r\n  }\r\n\r\n  const capture = (e) => {\r\n    let imageSrc = null;\r\n    if (webcamRef.current) {\r\n      imageSrc = webcamRef.current.getScreenshot();\r\n    }\r\n    if (imageSrc) handleCapture(e, imageSrc);\r\n  };\r\n\r\n  return (\r\n    <Grid item xs={6}>\r\n      <Grid container direction=\"column\" justifyContent=\"space-between\" alignItems=\"stretch\" >\r\n        <Webcam\r\n          audio={false}\r\n          ref={webcamRef}\r\n          id=\"webcam\"\r\n          screenshotFormat=\"image/jpeg\"\r\n          forceScreenshotSourceSize=\"true\"\r\n          style={{\r\n            width: \"100%\"\r\n          }}\r\n          videoConstraints={videoConstraints}\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" size=\"medium\" onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} onMouseLeave={handleMouseUp}>\r\n          Capture Photo\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default function Capture(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const scrollRef = React.useRef();\r\n  const [selectedFiles, setSelectedFiles] = React.useState([]);\r\n  const [toggleWebcam, setToggleWebcam] = React.useState(false);\r\n  const [toggleDraw, setToggleDraw] = React.useState(false);\r\n  const [alertPerm, setAlertPerm] = React.useState(false);\r\n\r\n  const askPermission = () => {\r\n    if (navigator.mediaDevices.getUserMedia !== null) {\r\n      var options = {\r\n        video: true,\r\n        audio: true\r\n      };\r\n      navigator.getUserMedia(options, function (stream) {\r\n        setAlertPerm(false);\r\n        setToggleDraw(false);\r\n        setToggleWebcam(prevState => !prevState);\r\n      }, function (e) {\r\n        console.log(\"You must grant this site to access your camera.\");\r\n      });\r\n    }\r\n  }\r\n  const handleWebcam = () => {\r\n    if (toggleWebcam) {\r\n      setToggleWebcam(prevState => !prevState);\r\n\r\n    } else {\r\n      props.onCameraOn();\r\n\r\n      async function checkIsApproved() {\r\n        let deviceInfo = await navigator.mediaDevices.enumerateDevices()\r\n\r\n        // are there any permitted webcam devices on the list\r\n        return [...deviceInfo].some(info => info.label !== \"\");\r\n      }\r\n\r\n      checkIsApproved().then(res => {\r\n        if (res) {\r\n          setAlertPerm(false);\r\n          setToggleDraw(false);\r\n          setToggleWebcam(prevState => !prevState);\r\n        } else {\r\n          setAlertPerm(true);\r\n          askPermission();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCapture = (e, src) => {\r\n    setSelectedFiles((prevImages) => prevImages.concat(src));\r\n  };\r\n\r\n  const handleCanvas = () => {\r\n    setToggleWebcam(false);\r\n    setToggleDraw(prevState => !prevState);\r\n  };\r\n\r\n  const handleDraw = (src) => {\r\n    setSelectedFiles((prevImages) => prevImages.concat(src));\r\n  };\r\n\r\n  const handleUpload = (e) => {\r\n    if (e.target !== null) {\r\n      const filesArray = Array.from(e.target.files).map(\r\n        (file) => URL.createObjectURL(file)\r\n      );\r\n\r\n      setSelectedFiles((prevImages) => prevImages.concat(filesArray));\r\n      Array.from(e.target.files).map(\r\n        (file) => URL.revokeObjectURL(file) // avoid memory leak\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleImageList = React.useCallback(() => {\r\n    props.onChange(selectedFiles);\r\n    setSelectedFiles(props.imageList);\r\n  }, [props, selectedFiles]);\r\n\r\n  const closeCamera = React.useCallback(() => {\r\n    setToggleWebcam(false);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (props.captureEl) {\r\n      props.captureEl.current = [handleImageList, closeCamera];\r\n    }\r\n  }, [props.captureEl, handleImageList, closeCamera])\r\n\r\n  React.useEffect(() => {\r\n    if (props.imageList) {\r\n      setSelectedFiles(props.imageList);\r\n    }\r\n  }, [props.imageList])\r\n\r\n  React.useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Box className={classes.root} key={props.cardId}>\r\n      <Grid container spacing={2} direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\" >\r\n        {toggleWebcam && <WebcamCapture onChange={handleCapture} />}\r\n        {toggleDraw && <Drawing onChange={handleDraw} />}\r\n        <Grid item xs={6} overflow=\"visible\" >\r\n          <Typography>\r\n            Add Image Samples:\r\n          </Typography>\r\n          <ImageList className={classes.imageList} ref={scrollRef} rowHeight=\"auto\" cols={4}>\r\n            {selectedFiles.map((item, index) => (\r\n              <ImageListItem key={index} cols={item.cols || 1}>\r\n                <img key={index} className={classes.image} src={item} alt={item.title} />\r\n              </ImageListItem>)\r\n            )}\r\n          </ImageList>\r\n        </Grid>\r\n      </Grid>\r\n      <Box display=\"flex\" pt={2}>\r\n        <Box p={0.5}>\r\n          <Button variant=\"outlined\" size=\"large\" color=\"primary\" onClick={handleWebcam} startIcon={<VideocamOutlinedIcon />}>\r\n            Webcam\r\n          </Button>\r\n        </Box>\r\n        <Box p={0.5}>\r\n          <Button variant=\"outlined\" size=\"large\" color=\"primary\" onClick={handleCanvas} startIcon={<GestureIcon />}>\r\n            Draw\r\n          </Button>\r\n        </Box>\r\n        <Box p={0.5}>\r\n          <input id={props.cardId} accept=\"image/*\" type=\"file\" multiple hidden onChange={handleUpload} />\r\n          <label htmlFor={props.cardId}>\r\n            <Button variant=\"outlined\" size=\"large\" color=\"primary\" component=\"span\" startIcon={<NoteAddIcon />}>\r\n              Upload\r\n            </Button>\r\n          </label>\r\n        </Box>\r\n      </Box>\r\n      {alertPerm ?\r\n        <div>\r\n          <Alert onClose={() => { setAlertPerm(false) }} severity=\"error\">\r\n            You must grant this site to access your camera. Please check your privacy setting and try again.\r\n          </Alert>\r\n        </div> : null\r\n      }\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport Select from '@material-ui/core/Select';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport PublishRoundedIcon from '@material-ui/icons/PublishRounded';\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport AssessmentOutlinedIcon from '@material-ui/icons/AssessmentOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Capture from './Capture.js';\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\nimport * as tmImage from '@teachablemachine/image';\r\n\r\n\r\nconst ITEM_HEIGHT = 80;\r\nconst useStyles = makeStyles((theme) => ({\r\n  classGrid: {\r\n    minHeight: '100vh'\r\n  },\r\n  classTitle: {\r\n    fontSize: '1.4rem'\r\n  },\r\n  cardClass: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: theme.spacing(4)\r\n  },\r\n  cardButton: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  cardAction: {\r\n    alignSelf: 'center'\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  cardCenter: {\r\n    position: 'fixed',\r\n    top: '50vh',\r\n    transform: 'translate(0, -50%)'\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: theme.spacing(2)\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(8)\r\n  },\r\n  progressColorPrimary: {\r\n    backgroundColor: '#DEDEDE'\r\n  },\r\n  progressBarActive: {\r\n    backgroundColor: '#00A1E9'\r\n  },\r\n  progressBarDisable: {\r\n    backgroundColor: '#6D6D6D'\r\n  }\r\n}));\r\n\r\nlet classifier, webcam;\r\n\r\nlet modelOptions: tmImage.ModelOptions = {\r\n  version: 2,\r\n  checkpointUrl: null,\r\n  alpha: 1,\r\n  trainingLayer: 'out_relu',\r\n};\r\n\r\n\r\nlet metadata: tmImage.Metadata = {\r\n  tfjsVersion: \"1.3.1\",\r\n  tmVersion: \"2.4.4\",\r\n  packageVersion: \"0.1.0\",\r\n  packageName: \"matrix-tm-react\",\r\n  modelName: \"MobileNet-cp13r\",\r\n  timeStamp: \"11-19-2021\",\r\n  labels: [],\r\n  userMetadata: {},\r\n  grayscale: false,\r\n  imageSize: 224,\r\n};\r\n\r\n// TODO: Use real parameters.\r\nlet parameters = tmImage.TrainingParameters = {\r\n  // denseUnits: Positive integer, dimensionality of the output space.\r\n  denseUnits: 100,\r\n  epochs: 50,\r\n  learningRate: 0.001,\r\n  batchSize: 16,\r\n}\r\n\r\nasync function loadPretrained() {\r\n  // Load the model.\r\n  // TODO: To load pre-trained model in \"Train\"\r\n  classifier = await tmImage.createTeachable(metadata, modelOptions);\r\n}\r\n\r\nasync function train(cards) {\r\n  // training graph settings\r\n  const metrics = ['acc', 'val_acc', 'loss', 'val_loss']\r\n  const container = {\r\n    tab: \"Training Process\",\r\n    name: '',\r\n    styles: {\r\n      height: '80%'\r\n    }\r\n  };\r\n  const fitCallbacks = tfvis.show.fitCallbacks(container, metrics)\r\n  // This will call prepareDataset and map title to card index.\r\n\r\n  classifier.setLabels(cards.map(({ title }) => title));\r\n\r\n  cards.forEach((card, card_index) => {\r\n    let tempImageList = card.imageList;\r\n    if (typeof tempImageList !== 'undefined' && tempImageList.length > 0) {\r\n      tempImageList.forEach(image => {\r\n        // blob to HTMLImageElement\r\n        let tempImageEl = new Image(224, 224);\r\n        tempImageEl.src = image;\r\n        classifier.addExample(card_index, tempImageEl);\r\n      });\r\n    }\r\n  })\r\n\r\n  // TODO: Use Real parameters.\r\n  await classifier.train(parameters, fitCallbacks);\r\n  console.log(classifier);\r\n  return true;\r\n}\r\n\r\nasync function preview() {\r\n  if (classifier) {\r\n    let flipped = false;\r\n    let prediction = await classifier.predict(webcam.canvas, flipped);\r\n    return prediction;\r\n  }\r\n}\r\n\r\n\r\nexport default function Interface() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const webcamCanvas = React.useRef(null);\r\n  const captureElList = React.useRef([]);\r\n  const trainGrid = React.useRef(null);\r\n  const previewGrid = React.useRef(null);\r\n\r\n  const [isTraining, setIsTraining] = React.useState(false);\r\n  const [isTrained, setIsTrained] = React.useState(false);\r\n  const [cards, setCards] = React.useState([\r\n    {\r\n      cardId: 1,\r\n      title: 'Class ' + 1,\r\n      imageList: []\r\n    },\r\n    {\r\n      cardId: 2,\r\n      title: 'Class ' + 2,\r\n      imageList: []\r\n    }\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    // Load the model\r\n    loadPretrained();\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (captureElList.current.length !== cards.length) {\r\n      captureElList.current = Array(cards.length).fill().map((_, i) => captureElList.current[i] || React.createRef());\r\n    }\r\n  }, [captureElList, cards.length])\r\n\r\n  function useParentWidthSize(porps) {\r\n    const [width, setWidth] = React.useState();\r\n    React.useEffect(() => {\r\n      let temp = getComputedStyle(porps.parentNode.current)\r\n      function updateSize() {\r\n        setWidth(porps.parentNode.current.clientWidth - parseFloat(temp.paddingLeft) - parseFloat(temp.paddingRight));\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    });\r\n    return width;\r\n  }\r\n\r\n\r\n  function ClassColumn() {\r\n\r\n    const onAddClassBtnClick = () => {\r\n      // update global cards imageList state before add new class\r\n      captureElList.current.forEach(f => f.current[0]());\r\n\r\n      let tempCards = [...cards];\r\n      if (tempCards.length) {\r\n        let newCardId = tempCards.at(-1).cardId + 1;\r\n        let newCard = {\r\n          cardId: newCardId,\r\n          title: 'Class ' + newCardId,\r\n          imageList: []\r\n        };\r\n        setCards([...tempCards, newCard]);\r\n      } else {\r\n        setCards([{\r\n          cardId: 1,\r\n          title: 'Class ' + 1,\r\n          imageList: []\r\n        }]);\r\n      }\r\n    };\r\n\r\n    const handleCards = (newCards) => {\r\n      setCards(newCards);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {cards.map((card, index) => (\r\n          <ClassCard key={card.cardId} cardId={card.cardId} cards={cards} title={card.title} imageList={card.imageList} onChange={handleCards} />\r\n        ))}\r\n        <Grid item xs={12}>\r\n          <Card className={classes.cardClass}>\r\n            <Button size=\"large\" color=\"primary\" onClick={onAddClassBtnClick} startIcon={<AddOutlinedIcon />}>\r\n              Add New Class\r\n            </Button>\r\n          </Card>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  function ClassCard(props) {\r\n    const options = [\r\n      'Delete Class',\r\n      'Disable Class',\r\n      'Remove All Samples'\r\n    ];\r\n\r\n    const [cardTitle, setCardTitle] = React.useState();\r\n    const [isTitleFocused, setIsTitleFocused] = React.useState(false);\r\n\r\n    const cardTitleRef = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n      if (props.title) {\r\n        setCardTitle(props.title);\r\n      }\r\n    }, [props.title]);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n\r\n    const handleCards = (cards) => {\r\n      props.onChange(cards);\r\n    }\r\n\r\n    const handleTitle = (e) => {\r\n      let tempCards = [...cards];\r\n      let index = tempCards.map(card => card.cardId).indexOf(props.cardId);\r\n      tempCards[index].title = e.currentTarget.value;\r\n      handleCards(tempCards);\r\n      setIsTitleFocused(false);\r\n\r\n      // update global cards imageList state after title updated\r\n      captureElList.current.forEach(f => f.current[0]());\r\n    }\r\n\r\n    const handleImageList = (imageList) => {\r\n      let tempCards = [...cards];\r\n      let index = tempCards.map(card => card.cardId).indexOf(props.cardId);\r\n      tempCards[index].imageList = [...imageList];\r\n      handleCards(tempCards);\r\n    };\r\n\r\n    const closeCamera = () => {\r\n      captureElList.current.forEach(f => f.current[1]());\r\n    }\r\n\r\n    const handleOpe = (opt) => {\r\n      let tempCards = [...cards];\r\n      switch (opt) {\r\n        case 'Delete Class':\r\n          // update global cards imageList state before delete class\r\n          captureElList.current.forEach(f => f.current[0]());\r\n\r\n          let index = tempCards.map(card => card.cardId).indexOf(props.cardId);\r\n          tempCards.splice(index, 1);\r\n          handleCards(tempCards);\r\n          break\r\n        case 'Disable Class':\r\n          break\r\n        case 'Remove All Samples':\r\n          break\r\n        default:\r\n      };\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Grid item xs={12}>\r\n          <Card className={classes.cardClass}>\r\n            <CardHeader\r\n              action={\r\n                <div>\r\n                  <IconButton aria-label=\"settings\" onClick={handleClick}>\r\n                    <MoreVertIcon />\r\n                  </IconButton>\r\n                  <Menu\r\n                    id=\"long-menu\"\r\n                    anchorEl={anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    keepMounted\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    PaperProps={{\r\n                      style: {\r\n                        maxHeight: ITEM_HEIGHT * 4.5,\r\n                        width: 'auto',\r\n                      },\r\n                    }}\r\n                  >\r\n                    {options.map((value, index) => (\r\n                      <MenuItem key={index} onClick={() => handleOpe(value)}>\r\n                        {value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Menu>\r\n                </div>\r\n              }\r\n              title={!isTitleFocused ? (\r\n                <Typography\r\n                  className={classes.classTitle}\r\n                  onClick={() => {\r\n                    setIsTitleFocused(true);\r\n                  }}\r\n                >\r\n                  {cardTitle}\r\n                  <IconButton aria-label=\"settings\" onClick={() => {\r\n                    setIsTitleFocused(true)\r\n                  }}>\r\n                    <Edit />\r\n                  </IconButton>\r\n                </Typography>\r\n              ) : (\r\n                <TextField\r\n                  autoFocus\r\n                  inputProps={{ className: classes.classTitle }}\r\n                  inputRef={cardTitleRef}\r\n                  value={cardTitle}\r\n                  onBlur={e => handleTitle(e)}\r\n                  onChange={e => setCardTitle(e.currentTarget.value)}\r\n                  onKeyDown={e => {\r\n                    if (e.key === 'Enter') {\r\n                      cardTitleRef.current.blur();\r\n                      setCardTitle(cardTitleRef.current.value);\r\n                    }\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n            <CardActions className={classes.cardButton}>\r\n              <Capture key={props.cardId} cardId={props.cardId} imageList={props.imageList}\r\n                captureEl={captureElList.current[cards.map(card => card.cardId).indexOf(props.cardId)]}\r\n                onChange={handleImageList} onCameraOn={closeCamera} />\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  function TrainColumn(props) {\r\n    const width = useParentWidthSize(props);\r\n    const [isUploadModel, setIsUploadModel] = React.useState(false);\r\n    const [isUploadWeights, setIsUploadWeights] = React.useState(false);\r\n\r\n    const [splitValue, setSplitValue] = React.useState(0.9);\r\n    const [epochsValue, setEpochsValue] = React.useState(50);\r\n    const [batchValue, setBatchValue] = React.useState(16);\r\n    const [lRateValue, setLRateValue] = React.useState(0.001);\r\n    const [isShowGraph, setIsShowGraph] = React.useState(true);\r\n\r\n    // Reset Training Parameters\r\n    const resetAllValues = () => {\r\n      setSplitValue(0.9);\r\n      setEpochsValue(50);\r\n      setBatchValue(16);\r\n      setLRateValue(0.001);\r\n    };\r\n\r\n    const handleTrainParameters = () => {\r\n      parameters[\"epochs\"] = Number(epochsValue);\r\n      parameters[\"learningRate\"] = Number(lRateValue);\r\n      parameters[\"batchSize\"] = Number(batchValue);\r\n    }\r\n\r\n    const handleTrain = () => {\r\n      handleTrainParameters();\r\n      props.captureEl.current.forEach(f => f.current.forEach(f => f()));\r\n      // Check is total sample count > 0\r\n      // TODO: ZeroSampleError\r\n      if (cards.map(({ imageList }) => imageList).flat(1).length > 0) {\r\n        setIsTraining((prev) => !prev);\r\n\r\n        train(cards).then(res => {\r\n          setIsTrained(res);\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleGraph = () => {\r\n    };\r\n\r\n    const handleSplitValue = (event, newValue) => {\r\n      setSplitValue(newValue);\r\n    };\r\n\r\n    /* tf loadLayersModel inputs are image-model.json and image-model.weights.bin \r\n    */\r\n    async function handleUploadModel() {\r\n      const uploadModel = document.getElementById('json-upload');\r\n      const uploadWeights = document.getElementById('weights-upload');\r\n\r\n      // fileName extension Check\r\n      if (uploadModel.files.length !== 0) {\r\n        // TODO:　Need to change file name to image-model.json\r\n        setIsUploadModel(true);\r\n      }\r\n      if (uploadWeights.files.length !== 0) {\r\n        // TODO:　Need to change file name to image-model.weights.bin\r\n        setIsUploadWeights(true);\r\n      }\r\n      // Load Model if both files are uploaded\r\n      if (uploadModel.files.length === 1 & uploadWeights.files.length === 1) {\r\n        tf.loadLayersModel(tf.io.browserFiles([uploadModel.files[uploadModel.files.length - 1],\r\n        uploadWeights.files[uploadWeights.files.length - 1]])).then(res => {\r\n          classifier.model = res;\r\n          setIsTrained(true);\r\n        }).catch(err => {\r\n          console.error(err);\r\n        });\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Card style={{ width: width }} className={classes.cardCenter} >\r\n          <CardHeader title=\"Train\" />\r\n          <CardActions className={classes.cardButton}>\r\n            {isTrained ?\r\n              <Button variant=\"contained\"\r\n                size=\"medium\"\r\n                fullWidth={true}\r\n                onClick={() => {\r\n                  handleTrain()\r\n                }}\r\n                disableElevation\r\n                disabled={isTrained}>\r\n                Trained\r\n              </Button>\r\n              :\r\n              <Button variant=\"contained\"\r\n                size=\"medium\"\r\n                fullWidth={true}\r\n                onClick={() => {\r\n                  handleTrain()\r\n                }}\r\n                disableElevation\r\n                disabled={isTraining}>\r\n                {isTraining ? `Training` : `Train Model`}\r\n              </Button>\r\n            }\r\n          </CardActions>\r\n          <CardActions className={classes.cardButton}>\r\n            <Button variant=\"contained\" size=\"large\" fullWidth={true} disabled={isUploadModel}\r\n              component=\"label\" startIcon={<ExitToAppRoundedIcon />} onChange={handleUploadModel}\r\n            >\r\n              <input id=\"json-upload\" type=\"file\" accept=\"*,.json\" hidden />\r\n              Upload Json\r\n            </Button>\r\n            <Button variant=\"contained\" size=\"large\" fullWidth={true} disabled={isUploadWeights}\r\n              component=\"label\" startIcon={<ExitToAppRoundedIcon />} onChange={handleUploadModel}\r\n            >\r\n              <input id=\"weights-upload\" type=\"file\" accept=\"*,.bin\" hidden />\r\n              Upload Weights\r\n            </Button>\r\n\r\n          </CardActions>\r\n          <Accordion>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Typography>Advanced</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <form className={classes.form}>\r\n                <div>\r\n                  <Typography>\r\n                    Train/Test-split:\r\n                  </Typography>\r\n                  <Slider\r\n                    id=\"train-test-split\"\r\n                    defaultValue={0.9}\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={0.1}\r\n                    marks\r\n                    min={0}\r\n                    max={1}\r\n                    value={splitValue}\r\n                    onChange={handleSplitValue}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Typography>\r\n                    Epochs:\r\n                  </Typography>\r\n                  <TextField\r\n                    id=\"epochs\"\r\n                    InputProps={{ inputProps: { min: 1, max: 200 } }}\r\n                    value={epochsValue}\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onChange={(e) => setEpochsValue(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Typography>\r\n                    Batch Size:\r\n                  </Typography>\r\n                  <Select\r\n                    id=\"batch-size\"\r\n                    value={batchValue}\r\n                    onChange={(e) => setBatchValue(e.target.value)}\r\n                    displayEmpty\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                  >\r\n                    <MenuItem value={16}>16</MenuItem>\r\n                    <MenuItem value={32}>32</MenuItem>\r\n                    <MenuItem value={64}>64</MenuItem>\r\n                    <MenuItem value={128}>128</MenuItem>\r\n                    <MenuItem value={256}>256</MenuItem>\r\n                    <MenuItem value={512}>512</MenuItem>\r\n                  </Select>\r\n                </div>\r\n                {/* TODO: Set learning Rate by step: 0.001 */}\r\n                <div>\r\n                  <Typography>\r\n                    Learning Rate:\r\n                  </Typography>\r\n                  <TextField\r\n                    id=\"learning_rate\"\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                      maxLength: 13,\r\n                      step: \"1\"\r\n                    }}\r\n                    value={lRateValue}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    inputProps={{ min: 0, max: 1, step: 0.001 }}\r\n                    onChange={(e) => setLRateValue(parseFloat(e.target.value).toFixed(3))}\r\n                  />\r\n\r\n                </div>\r\n                <Button onClick={resetAllValues} size=\"small\" color=\"primary\" endIcon={<RotateLeftIcon />} disableElevation>\r\n                  Reset Default\r\n                </Button>\r\n                <Button size=\"small\" color=\"primary\" endIcon={<AssessmentOutlinedIcon />}\r\n                  onClick={() => {\r\n                    handleGraph()\r\n                  }}>\r\n                  Graph\r\n                </Button>\r\n              </form>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n\r\n  function PreviewClassConfidence(props) {\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {Object.entries(props.predictClasses).map((predictClass, index) =>\r\n          <Box key={index} display=\"flex\" alignItems=\"center\">\r\n            <Box minWidth=\"15%\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {predictClass[1].className}\r\n              </Typography>\r\n            </Box>\r\n            <Box minWidth=\"75%\" mr={1}>\r\n              <LinearProgress classes={props.color} variant=\"determinate\" value={predictClass[1].probability * 100} />\r\n            </Box>\r\n            <Box minWidth=\"10%\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {`${Math.round(\r\n                  predictClass[1].probability * 100\r\n                )}%`\r\n                }\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  function PreviewCam(props) {\r\n\r\n    const [timeoutHandler, setTimeoutHandler] = React.useState(1);\r\n    const [state, setState] = React.useState({\r\n      inputSrc: false,\r\n      predictClasses: {}\r\n    });\r\n\r\n    const handleCheck = (event) => {\r\n      setState({ ...state, [event.target.name]: event.target.checked });\r\n      clearTimeout(timeoutHandler);\r\n    };\r\n\r\n    async function loadWebEl() {\r\n      webcam = new tmImage.Webcam(224, 224, false);\r\n      await webcam.setup();\r\n      if (state.inputSrc) {\r\n        await webcam.play();\r\n      }\r\n    }\r\n\r\n    const previewLoop = React.useCallback(() => {\r\n      webcam.update(); // update the webcam frame\r\n\r\n      let prediction = preview();\r\n      console.log(prediction);\r\n      prediction.then(res => {\r\n        console.log(res);\r\n        if (res.label !== \"\") {\r\n          let probability = res;\r\n          console.log(probability);\r\n          setState(state => ({ ...state, predictClasses: probability }));\r\n        }\r\n      });\r\n\r\n      if (state.inputSrc) setTimeoutHandler(setTimeout(previewLoop, 100))\r\n    }, [state.inputSrc]);\r\n\r\n    // TODO: Nees to fix: After import model, refreshing the page, then the webcam is not working.\r\n    React.useEffect(() => {\r\n      if (isTrained) {\r\n        let webcamLoaded = loadWebEl();\r\n\r\n        webcamLoaded.then(() => {\r\n          if (state.inputSrc) {\r\n            webcamCanvas.current.appendChild(webcam.canvas);\r\n            previewLoop();\r\n          } else {\r\n            webcamCanvas.current.innerHTML = '';\r\n          }\r\n        })\r\n      }\r\n      return () => {\r\n      };\r\n    }, [previewLoop, state.inputSrc]);\r\n\r\n    return (\r\n      <Grid container direction=\"column\" justifyContent=\"space-between\" alignItems=\"stretch\" >\r\n        {isTrained ?\r\n          <CardActions className={classes.cardButton}>\r\n            <dev ref={webcamCanvas}></dev>\r\n            <FormGroup row>\r\n              <Box>\r\n                <Typography>\r\n                  {state.inputSrc ? \"Input ON\" : \"Input OFF\"}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={state.inputSrc}\r\n                      onChange={handleCheck}\r\n                      name=\"inputSrc\"\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label={state.inputSrc}\r\n                />\r\n              </Box>\r\n            </FormGroup>\r\n          </CardActions>\r\n          :\r\n          <Typography>\r\n            You can preview the prediction here after training a model on the left.\r\n          </Typography>\r\n        }\r\n        {state.inputSrc ?\r\n          <PreviewClassConfidence predictClasses={state.predictClasses} color={{ bar: classes.progressBarActive, colorPrimary: classes.progressColorPrimary }} />\r\n          :\r\n          <PreviewClassConfidence predictClasses={state.predictClasses} color={{ bar: classes.progressBarDisable, colorPrimary: classes.progressColorPrimary }} />\r\n        }\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  function PreviewColumn(props) {\r\n    const width = useParentWidthSize(props);\r\n\r\n    async function handleExportModel() {\r\n      if (classifier) {\r\n        const exportConfig: tf.io.SaveConfig = {\r\n          \"trainableOnly\": false,\r\n          \"includeOptimizer\": true,\r\n        };\r\n        // the array is defined and has at least one element\r\n        await classifier.save('downloads://image-model', exportConfig);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Card style={{ width: width }} className={classes.cardCenter}>\r\n          <CardHeader title=\"Preview\" action={\r\n            <Button variant=\"contained\" size=\"large\" fullWidth={true} onClick={handleExportModel} startIcon={<PublishRoundedIcon />} disableElevation>\r\n              Export Model\r\n            </Button>\r\n          } />\r\n          <CardContent className={classes.cardContent}>\r\n            <PreviewCam />\r\n          </CardContent>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <main>\r\n        <Container className={classes.cardGrid} maxWidth=\"xl\">\r\n          <Grid container spacing={8}>\r\n            <Grid container item className={classes.classGrid} key={1} xs={12} sm={6} md={6} alignContent=\"center\">\r\n              <ClassColumn />\r\n            </Grid>\r\n            <Grid item ref={trainGrid} key={2} xs={12} sm={6} md={2}>\r\n              <TrainColumn captureEl={captureElList} parentNode={trainGrid} />\r\n            </Grid>\r\n            <Grid item ref={previewGrid} key={3} xs={12} sm={6} md={4}>\r\n              <PreviewColumn parentNode={previewGrid} />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Interface from './Interface';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Interface />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}